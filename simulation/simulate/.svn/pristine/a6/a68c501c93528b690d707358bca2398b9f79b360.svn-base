#!/usr/bin/env python
import random
import math
	

def getSeqMutator(errorate):
	return ExhaustiveSeqMutator(errorate)
	#if(errorate<0.015):
	#	return PoisonSeqMutator(errorate)
	#else:
	#	return ExhaustiveSeqMutator(errorate)

class PoisonSeqMutator:

	def __init__(self,errorrate):
		self.__er=errorrate
		self.__tr={'A':['T','C','G'], 'T':['A','C','G'],'C':['A','T','G'],'G':['A','T','C']}
	
	def __getPoisson(self,lam):
		L= math.exp(-lam)
		p=1.0
		k=0
		while(True):
			k+=1
			p*=random.random()
			if(p<L):
				break
		return k-1
	
	
	

	def mutateseq(self,seq):
		if(self.__er<0.0000000001):
			return seq
		aver=float(len(seq))*self.__er
		errors=self.__getPoisson(aver)
		lseq=list(seq)
		for i in range(0,errors):
			pos=random.randint(0,len(lseq)-1)
			tr=self.__tr[lseq[pos]]
			random.shuffle(tr)
			lseq[pos]=tr[0]
		return "".join(lseq)


class ExhaustiveSeqMutator:
	
	def __init__(self,errorrate):
		self.__er=errorrate
		self.__tr={'A':['T','C','G'], 'T':['A','C','G'],'C':['A','T','G'],'G':['A','T','C']}
	

	def mutateseq(self,seq):
		if(self.__er<0.0000000001):
			return seq

		lseq=list(seq)
		for i in range(0,len(lseq)):
			# test every base if it should have an error
			if random.random()<self.__er:
				tr=self.__tr[lseq[i]]
				random.shuffle(tr)
				lseq[i]=tr[0]
		return "".join(lseq)
		
