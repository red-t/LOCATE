import unittest
import os
import inspect
import sys

 # realpath() will make your script run, even if you symlink it :)
cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))
if cmd_folder not in sys.path:
     sys.path.insert(0, cmd_folder)

 # use this if you want to include modules from a subfolder
cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0],"../bin")))
if cmd_subfolder not in sys.path:
     sys.path.insert(0, cmd_subfolder)
     
     
from TESequenceBuilder import SequenceContainer


class Test_BasicStartSeqList(unittest.TestCase):
    def setUp(self):
        seqlist=["AAAAAAAAAA","TTT","CCC","GGG"]
        self.tt=SequenceContainer(seqlist)
        
    def test_getseq(self):
        tt=self.tt
        self.assertEqual(tt.getTESequence("$1").sequence,"AAAAAAAAAA")
        self.assertEqual(tt.getTESequence("$2").sequence,"TTT")
        self.assertEqual(tt.getTESequence("$3").sequence,"CCC")
        self.assertEqual(tt.getTESequence("$4").sequence,"GGG")
        
        
    def test_definition(self):
        tt=self.tt
        tt.addDefinition("d=$1")
        self.assertEqual(tt.getTESequence("d").sequence,"AAAAAAAAAA")
        tt.addDefinition("e=$1-")
        self.assertEqual(tt.getTESequence("e").sequence,"TTTTTTTTTT")
        tt.addDefinition("f=$1+")
        self.assertEqual(tt.getTESequence("f").sequence,"AAAAAAAAAA")
        

    def test_unusualdefinition(self):
        tt=self.tt
        tt.addDefinition("d =$1")
        self.assertEqual(tt.getTESequence("d").sequence,"AAAAAAAAAA")
        tt.addDefinition("e= $1-")
        self.assertEqual(tt.getTESequence("e").sequence,"TTTTTTTTTT")
        tt.addDefinition("f = $1+")
        self.assertEqual(tt.getTESequence("f").sequence,"AAAAAAAAAA")
        tt.addDefinition(" g = $1+ ")
        self.assertEqual(tt.getTESequence("g").sequence,"AAAAAAAAAA")
        
    def test_variousdefinitions(self):
        tt=self.tt
        tt.addDefinition("a=$1")
        self.assertEqual(tt.getTESequence("a").sequence,"AAAAAAAAAA")
        tt.addDefinition("b=a-")
        self.assertEqual(tt.getTESequence("b").sequence,"TTTTTTTTTT")
        tt.addDefinition("c=\"ATCG\"")
        self.assertEqual(tt.getTESequence("c").sequence,"ATCG")
        
    def test_tsdreading(self):
        tt=self.tt
        tt.addDefinition("a=$1+3bp")
        self.assertEqual(tt.getTESequence("a").tsd,3)
        tt.addDefinition("b=a-100bp")
        self.assertEqual(tt.getTESequence("b").tsd,100)
        tt.addDefinition("c=\"ATCG\"+12bp")
        self.assertEqual(tt.getTESequence("c").tsd,12)

class Test_Deletions(unittest.TestCase):
     def setUp(self):
          seqlist=["AAATTTAAA","CCCCAAAACCCC"]
          self.tt=SequenceContainer(seqlist)
        
     def test_getseq(self):
          tt=self.tt
          tt.addDefinition("b=a-")
        self.assertEqual(tt.getTESequence("b").sequence,"TTTTTTTTTT")
        tt.addDefinition("c=\"ATCG\"")
        self.assertEqual(tt.getTESequence("c").sequence,"ATCG")

                
                          

if __name__ == '__main__':
    unittest.main()
    
    
    
    