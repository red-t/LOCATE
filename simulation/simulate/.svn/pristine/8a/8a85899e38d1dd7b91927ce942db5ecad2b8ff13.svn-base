#!/usr/bin/env python
import os
import sys
import inspect
import re
import argparse
import random


 # realpath() will make your script run, even if you symlink it :)
cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))
if cmd_folder not in sys.path:
     sys.path.insert(0, cmd_folder)

 # use this if you want to include modules from a subfolder
cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0],"bin")))
if cmd_subfolder not in sys.path:
     sys.path.insert(0, cmd_subfolder)


from SeqLoader import *
from fastaIO import FastaReader,FastaWriter
from TEDefinition import TEDefinitionReader

parser = argparse.ArgumentParser(description="""           
Description
-----------
This script generates random insertions of TE insertions
""",formatter_class=argparse.RawDescriptionHelpFormatter,
epilog="""
Authors
-------
    Ram Vinay Pandey
    Robert Kofler
    Christian Schloetterer
 
""")




def load_teseqs(tefile):
    toret=[]
    fr=FastaReader(tefile)
    for header,seq in fr:
        toret.append(seq)
    return toret    

def get_definitions_forsampledid(sites,sampleid):
    toret=[]
    for ted in sites:
        pos,comment,tedefinition=ted.position,ted.comment,ted.tesites
        sample=tedefinition[sampleid]
        tsd=ted.getTSD()
        toret.append((pos,sample,tsd))
    return toret

# split the sequences into peaces at the site
def split_sequence(seq,splitsites):
    #print(splitsites)
    toret=[]
    prev=0
    for ss, tmp,tmp2 in splitsites:
        subsplit=seq[prev:ss-1]
        toret.append(subsplit)
        prev=ss-1
    toret.append(seq[prev:]) # add the last as well
    
    return toret
    
    
    

parser.add_argument("--chasis", type=str, required=True, dest="ref_fasta", default=None, help="Provide the chasis into which TEs should be inserted, a fasta file")
parser.add_argument("--te-seqs", type=str, required=True, dest="te_fasta", default=None, help="Provide the TE consensus fasta file")
parser.add_argument("--te-sites", type=str, required=True, dest="te_sites", default=None, help="Provide the number of haploid genomes")
parser.add_argument("--output", type=str, required=True, dest="output", default=None, help="The output file")
args = parser.parse_args()

fw=FastaWriter(args.output,60)
# load the genomes of the chasis and TEs
print "Loading chasis"
header,chasis=load_chasis(args.ref_fasta)
print "Finished; Will use chasis "+header+" with a length of "+str(len(chasis))+"bp"
print "Loading TE sequences"
teseqs=load_teseqs(args.te_fasta)
print "Finished; Will use "+ str(len(teseqs))+ " TE sequences"
print "Loading TE insertion sites"
sites=TEDefinitionReader.readall(args.te_sites)
print "Finished; Will use "+ str(len(sites))+ " TE insertion sites"
genomes=sites[0].getSitecount()
print "Will generate " +str(genomes)+ " haploid genomes"

counter=1;
for i in range(0,genomes):
    tedefs=get_definitions_forsampledid(sites,i) 
    splits=split_sequence(chasis,tedefs)
    genome=splits.pop(0)
    for ss,fam,tsd in tedefs:
        totsd=""
        if tsd>0 and len(genome)>tsd:
          totsd=genome[-tsd:]
          
        if fam.teid!=0: # ignore if 0 ie no insertion
            teseq=teseqs[fam.teid-1] # fam is 1-based (0 is no insertion)
            if(not fam.plusstrand): # reverse complement it if not plusstrand
               teseq=rc(teseq)
            genome+=teseq
            genome+=totsd
        genome+=splits.pop(0)
    fw.write(header+"_"+str(counter),genome)
    counter+=1
    
fw.close()
print "Finished"
    
    
    
    



