#!/usr/bin/env python
import re
from TEInsert import *
from fastaIO import SequenceUtility
from Mutator import ExhaustiveSeqMutator


        

class SequenceContainer:
	
	def __init__(self,startseqlist):
		self.__ssl=startseqlist # sequences loaded from the input file
		self.__sc={} # sequence container
		
		
	def addDefinition(self,definition):
		"""
		Add a new TE definition to the container 
		"""
		if "=" not in definition:
			raise Exception("Invalid defintion; must contain '=' "+str(definition))
		d,seqid=re.split("=",definition)
		d=d.strip(" ") # remove white spaces
		if d in self.__sc:
			raise Exception("Shortcut for sequence does already exist: "+d)
		seq=self.getTESequence(seqid)
		self.__sc[d]=seq
		return True
		
		
		
		
		
	def getTESequence(self,id):
		"""
		either direct get sequence by shortcut: e.g. d, e, $1, 1
		or use a definition e.g. $1[100-200]+
		"""
		## remove white spaces
		id=id.strip(" ")
		## direct access; no strand info +-
		m=re.search(r"([+-])",id)
		if m is None:
			return self.__teseqfromHash(id)

		strand=m.group(1)
		left,right=re.split("[+-]",id)
		
		teseq= self.__process_left(left)
		teseq= self.__fixstrand(teseq,strand)
		teseq= self.__process_right(teseq,right)
		return teseq

		
	def __process_right(self, teseq, right):
		if right=="":
			return teseq
		
		## Separate nested insertions from the rest % and bp
		pureright=right
		nested=""
		if "{" in right:
			re.search(r"^(.*?){(.*)}(.*?)$",right)
			pureright=m.group(1)+m.group(3)
			nested=m.group(2)
	
		# TSD
		tsd=0
		m=re.search(r"([\d\.]+)bp",pureright)
		if m is not None:
			tsd=int(m.group(1))
			teseq.tsd=tsd # SET THE NEW TSD; ONLY WHEN NEEDED
			
		# sequence divergence in percent	
		div=0.0
		m=re.search(r"([\d\.]+)%",pureright)
		if m is not None:
			div=float(m.group(1))
			mutator=ExhaustiveSeqMutator(float(div/100.0))
			teseq.sequence=mutator.mutateseq(teseq.sequence)  ## SET THE NEW SEQUENCE DIVERGENCE ONLY WHEN NEEDED
		
		#### NESTED #####
		if nested == "":
			return teseq
		tonest=[nested]
		if nested.contains(","):
			tonest=re.split(",",nested)
		
		pairs=[]
		for t in tonest:
			pos,seqid=t.split(":")
			pos=int(pos)
			seq=self.getTESequence(seqid) # recursion :)
			pairs.add((pos,seq))
		teseq.sequence = TESeqInserter.insertSequences(teseq.sequence,pairs)
		return teseq
		
		
	
	
	

	def __fixstrand(self,teseq,strand):
		if strand=="+":
			return teseq
		elif strand=="-":
			teseq.sequence=SequenceUtility.rc(teseq.sequence)
			return teseq
		else:
			raise Exception("invalid strand "+str(strand))

		
			

	def __process_left(self,left):
		
		seqid=left
		deldef=""
		if "[" in left:
			seqid,deldef=re.split("[",left)
			deldef=deldef.rstrip("]")
			
		# get the BASE sequence
		teseq=self.__teseqfromHash(seqid)
		
		## NO DELETIONS; just return the sequence
		if deldef=="":
			return teseq
		
		####			
		####		 DELETIONS
		####			
		
		deletions=[deldef]
		if "," in deldef:
			deletions=re.split(",",deldef)
		
		delset=set([])
		for d in deletions:
			start,end=re.split("\.\.",d)
			start = __getPosition(start,teseq)
			end = __getPosition(end,teseq)
			for i in range(start,end+1):
				delset.add(i)
			
		return __commence_deleting(teseq,delset)
	

	def __commence_deleting(teseq,delset):
		seq=list(teseq.sequence)
		todel=sorted(list(delset),key=lambda i:-i)
		for i in todel:
			del seq[i-1]
		newseq="".join(seq)
		toret=TEInsert(newseq, teseq.id, teseq.tsd)
		return toret

		
	def __teseqfromHash(self,seqid):
		"""
		get the sequence for a sequence id
		- if it starts with $ use the number from the file
		- if not get it from the sequence hash
		"""
		if seqid.startswith("$"):
			# when using the TE from a file, a new TESequence object needs to be generated
			seqid=int(seqid[1:])-1
			seq=self.__ssl[seqid]
			tes=TESequence(seq,seqid,0) # sequence, id,  tsd
			return tes
		elif seqid.startswith("\""):
			seq=seqid.strip("\"")
			tes=TESequence(seq,seqid,0)
			return tes
		else:
			if seqid not in self.__sc:
				raise Exception("Unknown sequence "+seqid)
			return self.__sc[seqid]
		
		
	def __getPosition(self,pos,teseq):
		"""
		translate the position provided by the user into an int
		#accomodate ^ $ | beginning, end, middle
		"""
		
		if pos=="^":
			return 1
		elif pos=="$":
			return len(teseq.sequence)
		elif pos=="|":
			return int(len(teseq.sequence)/2)
		else:
			return int(pos)
			
